//jshint esversion: 6

//Declaring variables for charts to prevent undefined errors
var revenueChart = 0;
var detailsChart = 0;
var detailsChart2 = 0;
var detailsChart3 = 0;
var resourceChart = 0;
var sectionChart = 0;
var classChart1 = 0;
var classChart2 = 0;
var classChart3 = 0;
sample1Chart = 0;
sample2Chart = 0;

// ================================================================================

var sc = document.getElementById("sample1-chart");
if (sc) {
  generateSC();
}

//Generate Chart for Revenue
async function generateSC() {
  var samples1 = [];
  var samples2 = [];
  var samplesT = await renderSample();
  for (var k = 0; k < 5; k++) {
    samples1.push(samplesT[k]);
  }
  for (var k = 5; k < 10; k++) {
    samples2.push(samplesT[k]);
  }

  console.log(samplesT);
  console.log(samples1);
  console.log(samples2);

  sample1Chart = new Chart(document.getElementById("sample1-chart"), {
    type: 'doughnut',
    data: {
      datasets: [{
        data: samples1,
        backgroundColor: ['rgb(255, 99, 132)', 'rgb(255, 159, 78)', 'rgb(255, 205, 86)', 'rgb(35, 202, 180)', 'rgb(54, 182, 235)', ],
      }, ],
      labels: ['SBE', 'SELS', 'SETS', 'SLASS', 'SPPH'],
    },
    options: {
      plugins: {
        datalabels: {
          display: true,
          align: 'bottom',
          backgroundColor: '#ccc',
          borderRadius: 3,
          font: {
            size: 18,
          }
        },
      }
    }
  });

  sample2Chart = new Chart(ctx = document.getElementById("sample2-chart"), {
    type: 'doughnut',
    data: {
      datasets: [{
        data: samples2,
        backgroundColor: ['rgb(150, 100, 235)', 'rgb(64, 159, 255)', 'rgb(185, 25, 75)', 'rgb(255, 205, 86)', 'rgb(45, 185, 75)'],
      }, ],
      labels: ['SBE', 'SELS', 'SETS', 'SLASS', 'SPPH'],
    },
    options: {
      plugins: {
        datalabels: {
          display: true,
          align: 'bottom',
          backgroundColor: '#ccc',
          borderRadius: 3,
          font: {
            size: 18,
          }
        },
      }
    }
  });
}

// -------------------------------------------------------------------------------

//Generate Chart for Revenue
async function generateRC(name) {
  //Taken from IUB website
  const feepercredit = 6000;

  //Calculation for database values for revenue
  var credits1 = await renderUsers(rf_t1, rf_sem1, rf_year1);
  var credits2 = await renderUsers(rf_t1, rf_sem2, rf_year2);
  var credits3 = await renderUsers(rf_t1, rf_sem3, rf_year3);
  var prevCreds1 = await renderUsers(rf_t1, rf_sem1, rf_year1 - 1);
  var prevCreds2 = await renderUsers(rf_t1, rf_sem2, rf_year2 - 1);
  var prevCreds3 = await renderUsers(rf_t1, rf_sem3, rf_year3 - 1);

  //Revenue In Billions
  var rev1 = Math.floor((credits1 * feepercredit) / 1000000);
  var rev2 = Math.floor((credits2 * feepercredit) / 1000000);
  var rev3 = Math.floor((credits3 * feepercredit) / 1000000);
  //Percentage change
  var change1 = ((credits1 - prevCreds1) / credits1) * 100;
  var change2 = ((credits2 - prevCreds2) / credits2) * 100;
  var change3 = ((credits3 - prevCreds3) / credits3) * 100;
  //Checking for zero values in case data does not exist
  if (change1 == 100) {
    change1 = 0;
  } else if (change2 == 100) {
    change2 = 0;
  } else if (change3 == 100) {
    change3 = 0;
  }

  //Logs for debugging
  console.log("Credits 1: " + credits1);
  console.log("Credits 2: " + credits2);
  console.log("Credits 3: " + credits3);
  console.log("Revenue 1: " + rev1);
  console.log("Revenue 2: " + rev2);
  console.log("Revenue 3: " + rev3);
  console.log("Change 1: " + change1);
  console.log("Change 2: " + change2);
  console.log("Change 3: " + change3);

  var rf_xValues = [rf_x1, rf_x2, rf_x3];
  var rf_yValues = [rev1, rev2, rev3];
  var rf_yValues2 = [change1, change2, change3];

  var chartTitle = document.getElementById("Chart-Title");
  chartTitle.innerHTML = "Revenue Generated by " + rf_t1 + " & the % Change"

  revenueChart = new Chart(document.getElementById("revenue-chart"), {
    type: 'bar',
    data: {
      datasets: [{
        label: 'Percentage Change of Revenue',
        data: rf_yValues2,
        borderColor: "#ed7d31",
        fill: false,
        borderWidth: 3,
        backgroundColor: "#ffecd9",
        barThickness: 40,
        order: 2,
        yAxisID: 'percentage'

      }, {
        label: 'Revenue (Taka In Millions)',
        data: rf_yValues,
        borderColor: "#3e95cd",
        type: 'line',
        fill: false,
        order: 1,
        yAxisID: 'y'
      }],
      labels: rf_xValues
    },
    options: {
      title: {
        display: true,
        position: 'bottom',
        text: 'Revenue generated by ' + rf_t1 + " & the % Change"
      },
      scales: {
        y: {
          beginAtZero: true,
          type: 'linear',
          position: 'left'
        },
        percentage: {
          beginAtZero: true,
          type: 'linear',
          position: 'right',
          grid: {
            drawOnChartArea: false
          },
          ticks: {
            callback: function(value, index, values) {
              return `${value}.0 %`;
            }
          }
        }
      }
    }
  });
}

// -----------------------------------------------------------------------------------

//Create Table Function
function createTable(divID, labelings, val1, val2, val3, val4, val5, val6) {
  const data = {
    labels: labelings,
    backgroundColor: [
      'rgb(255, 99, 132, 0.35)',
      'rgb(255, 159, 64, 0.35)',
      'rgb(255, 205, 86, 0.35)',
      'rgb(75, 192, 192, 0.35)',
      'rgb(153, 102, 255, 0.35)',
      'rgb(54, 162, 235, 0.35)'
    ],
    datasets: [{
      label: 'SBE',
      data: val1
    }, {
      label: 'SELS',
      data: val2
    }, {
      label: 'SETS',
      data: val3
    }, {
      label: 'SLASS',
      data: val4
    }, {
      label: 'SPPH',
      data: val5
    }, {
      label: 'Total',
      data: val6
    }]
  };

  const chartBox = document.querySelector(divID);
  const tableDiv = document.createElement('DIV');
  tableDiv.setAttribute('id', 'tableDiv');

  const table = document.createElement('TABLE');
  table.classList.add('chartjs-table');

  //thead
  const thead = table.createTHead();
  thead.classList.add('chartjs-thead');

  thead.insertRow(0);
  for (let i = 5; i >= 0; i--) {
    thead.rows[0].insertCell(0).innerText = data.datasets[i].label;
  };
  thead.rows[0].insertCell(0).innerText = 'Enrollment';

  //tbody
  const tbody = table.createTBody();
  tbody.classList.add('chartjs-tbody');

  //Substituting undefined for zero in case of failure to retrieve data
  for (let l = 0; l < data.datasets.length; l++) {
    for (let n = 0; n < data.labels.length; n++) {
      if (data.datasets[l].data[n] === undefined) {
        data.datasets[l].data[n] = '0';
      }
    }
  }

  //Loop to insert data
  for (let m = 0; m < data.labels.length; m++) {
    tbody.insertRow(m);
    data.datasets.map((dataset, index) => {
      tbody.rows[m].insertCell(index).innerText = dataset.data[m];
    })
    tbody.rows[m].insertCell(0).innerText = data.labels[m];
  }

  // data.datasets.map((dataset, index) => {
  //   for (let m = 0; m < data.labels.length; m++) {
  //     tbody.insertRow(m);
  //     tbody.rows[m].insertCell(0).innerText = dataset.data[m];
  //   }
  //   tbody.rows[m].insertCell(0).innerText = data.labels[m];
  // })

  chartBox.appendChild(tableDiv);
  tableDiv.appendChild(table);
}

// -------------------------------------------------------------------------------

// Generate chart for Section Details
async function generateDC(name) {
  //ORDER : SBE SELS SETS SLASS SPPH TOTAL
  //First Input Variables
  var df_yValues1 = [];
  var df_yValues2 = [];
  var df_yValues3 = [];
  var df_yValues4 = [];
  var df_yValues5 = [];
  var df_yValues6 = [];

  //Second Input Variables
  var df2_yValues1 = [];
  var df2_yValues2 = [];
  var df2_yValues3 = [];
  var df2_yValues4 = [];
  var df2_yValues5 = [];
  var df2_yValues6 = [];

  //Third Input variables
  var df3_yValues1 = [];
  var df3_yValues2 = [];
  var df3_yValues3 = [];
  var df3_yValues4 = [];
  var df3_yValues5 = [];
  var df3_yValues6 = [];

  var count = 0;

  //ORDER : SBE SELS SETS SLASS SPPH TOTAL
  for (var k = 1; k < df_n1; k++) {
    var secDetails = await renderDetails(df_sem1, df_year1, k);
    var secDetails2 = await renderDetails(df_sem2, df_year2, k);
    var secDetails3 = await renderDetails(df_sem3, df_year3, k);
    var total = 0;
    var total2 = 0;
    var total3 = 0;
    count++;

    //Loop for first input
    for (var h = 0; h < secDetails.length; h++) {
      total += secDetails[h][0];
      if (secDetails[h][1] == "SBE") {
        df_yValues1.push(secDetails[h][0]);
      } else if (secDetails[h][1] == "SELS") {
        df_yValues2.push(secDetails[h][0]);
      } else if (secDetails[h][1] == "SETS") {
        df_yValues3.push(secDetails[h][0]);
      } else if (secDetails[h][1] == "SLASS") {
        df_yValues4.push(secDetails[h][0]);
      } else if (secDetails[h][1] == "SPPH") {
        df_yValues5.push(secDetails[h][0]);
      }
    }
    df_yValues6.push(total);

    //Loop for second input
    for (var h = 0; h < secDetails2.length; h++) {
      total2 += secDetails2[h][0];
      if (secDetails2[h][1] == "SBE") {
        df2_yValues1.push(secDetails2[h][0]);
      } else if (secDetails2[h][1] == "SELS") {
        df2_yValues2.push(secDetails2[h][0]);
      } else if (secDetails2[h][1] == "SETS") {
        df2_yValues3.push(secDetails2[h][0]);
      } else if (secDetails2[h][1] == "SLASS") {
        df2_yValues4.push(secDetails2[h][0]);
      } else if (secDetails2[h][1] == "SPPH") {
        df2_yValues5.push(secDetails2[h][0]);
      }
    }
    df2_yValues6.push(total2);

    //Loop for third input
    for (var h = 0; h < secDetails3.length; h++) {
      total3 += secDetails3[h][0];
      if (secDetails3[h][1] == "SBE") {
        df3_yValues1.push(secDetails3[h][0]);
      } else if (secDetails3[h][1] == "SELS") {
        df3_yValues2.push(secDetails3[h][0]);
      } else if (secDetails3[h][1] == "SETS") {
        df3_yValues3.push(secDetails3[h][0]);
      } else if (secDetails3[h][1] == "SLASS") {
        df3_yValues4.push(secDetails3[h][0]);
      } else if (secDetails3[h][1] == "SPPH") {
        df3_yValues5.push(secDetails3[h][0]);
      }
    }
    df3_yValues6.push(total3);

    //Checking for missing or zero df_yValues
    if (df_yValues1.length != k)
      df_yValues1.push(0);
    if (df_yValues2.length != k)
      df_yValues2.push(0);
    if (df_yValues3.length != k)
      df_yValues3.push(0);
    if (df_yValues4.length != k)
      df_yValues4.push(0);
    if (df_yValues5.length != k)
      df_yValues5.push(0);
    if (df2_yValues1.length != k)
      df2_yValues1.push(0);
    if (df2_yValues2.length != k)
      df2_yValues2.push(0);
    if (df2_yValues3.length != k)
      df2_yValues3.push(0);
    if (df2_yValues4.length != k)
      df2_yValues4.push(0);
    if (df2_yValues5.length != k)
      df2_yValues5.push(0);
    if (df3_yValues1.length != k)
      df3_yValues1.push(0);
    if (df3_yValues2.length != k)
      df3_yValues2.push(0);
    if (df3_yValues3.length != k)
      df3_yValues3.push(0);
    if (df3_yValues4.length != k)
      df3_yValues4.push(0);
    if (df3_yValues5.length != k)
      df3_yValues5.push(0);
  }
  //END OF MAIN 3 CHART LOOP

  //Declaring Label Variables
  var df_xValues = [];
  for (var m = 1; m < df_n1; m++) {
    df_xValues.push(m);
  }

  var chartTitle = document.getElementById("DF-Chart-Title");
  chartTitle.innerHTML = "Comparitive Analysis of Number of Sections for " + df_x1;

  var chartTitle = document.getElementById("DF-Chart-Title2");
  chartTitle.innerHTML = "Comparitive Analysis of Number of Sections for " + df_x2;

  var chartTitle = document.getElementById("DF-Chart-Title3");
  chartTitle.innerHTML = "Comparitive Analysis of Number of Sections for " + df_x3;

  //CHART 1
  detailsChart = new Chart(document.getElementById("details-chart"), {
    type: 'bar',
    data: {
      datasets: [{
        label: 'SBE',
        data: df_yValues1,
        backgroundColor: 'rgb(255, 99, 132, 0.35)',
        fill: true
      }, {
        label: 'SELS',
        data: df_yValues2,
        backgroundColor: 'rgb(255, 159, 64, 0.35)',
        fill: true
      }, {
        label: 'SETS',
        data: df_yValues3,
        backgroundColor: 'rgb(255, 205, 86, 0.35)',
        fill: true
      }, {
        label: 'SLASS',
        data: df_yValues4,
        backgroundColor: 'rgb(75, 192, 192, 0.35)',
        fill: true
      }, {
        label: 'SPPH',
        data: df_yValues5,
        backgroundColor: 'rgb(153, 102, 255, 0.35)',
        fill: true
      }, {
        label: 'Total',
        data: df_yValues6,
        backgroundColor: 'rgb(54, 162, 235, 0.35)',
        fill: true
      }],
      labels: df_xValues
    },
    options: {
      title: {
        display: true,
        position: 'bottom',
        text: 'Number of Sections for Each Enrolled Sizes for each Schools'
      }
    }
  });

  if (df_d1 == '(Detailed)') {
    createTable('.chartbox1', df_xValues, df_yValues1, df_yValues2, df_yValues3, df_yValues4, df_yValues5, df_yValues6);
  }

  //CHART 2
  detailsChart2 = new Chart(document.getElementById("details-chart2"), {
    type: 'bar',
    data: {
      datasets: [{
        label: 'SETS',
        data: df2_yValues1,
        backgroundColor: 'rgb(255, 99, 132, 0.35)',
        fill: true
      }, {
        label: 'SBE',
        data: df2_yValues2,
        backgroundColor: 'rgb(255, 159, 64, 0.35)',
        fill: true
      }, {
        label: 'SELS',
        data: df2_yValues3,
        backgroundColor: 'rgb(255, 205, 86, 0.35)',
        fill: true
      }, {
        label: 'SLASS',
        data: df2_yValues4,
        backgroundColor: 'rgb(75, 192, 192, 0.35)',
        fill: true
      }, {
        label: 'SPPH',
        data: df2_yValues5,
        backgroundColor: 'rgb(153, 102, 255, 0.35)',
        fill: true
      }, {
        label: 'Total',
        data: df2_yValues6,
        backgroundColor: 'rgb(54, 162, 235, 0.35)',
        fill: true
      }],
      labels: df_xValues
    },
    options: {
      title: {
        display: true,
        position: 'bottom',
        text: 'Number of Sections for Each Enrolled Sizes for each Schools'
      }
    }
  });

  if (df_d2 == '(Detailed)') {
    createTable('.chartbox2', df_xValues, df2_yValues1, df2_yValues2, df2_yValues3, df2_yValues4, df2_yValues5, df2_yValues6);
  }

  //CHART 3
  detailsChart3 = new Chart(document.getElementById("details-chart3"), {
    type: 'bar',
    data: {
      datasets: [{
        label: 'SETS',
        data: df3_yValues1,
        backgroundColor: 'rgb(255, 99, 132, 0.35)',
        fill: true
      }, {
        label: 'SBE',
        data: df3_yValues2,
        backgroundColor: 'rgb(255, 159, 64, 0.35)',
        fill: true
      }, {
        label: 'SELS',
        data: df3_yValues3,
        backgroundColor: 'rgb(255, 205, 86, 0.35)',
        fill: true
      }, {
        label: 'SLASS',
        data: df3_yValues4,
        backgroundColor: 'rgb(75, 192, 192, 0.35)',
        fill: true
      }, {
        label: 'SPPH',
        data: df3_yValues5,
        backgroundColor: 'rgb(153, 102, 255, 0.35)',
        fill: true
      }, {
        label: 'Total',
        data: df3_yValues6,
        backgroundColor: 'rgb(54, 162, 235, 0.35)',
        fill: true
      }],
      labels: df_xValues
    },
    options: {
      title: {
        display: true,
        position: 'bottom',
        text: 'Number of Sections for Each Enrolled Sizes for each Schools'
      }
    }
  });

  if (df_d3 == '(Detailed)') {
    createTable('.chartbox3', df_xValues, df3_yValues1, df3_yValues2, df3_yValues3, df3_yValues4, df3_yValues5, df3_yValues6);
  }
}

// ================================================================================

//Generate chart for unused resources
async function generateURC(name) {
  //First Input Variables
  var ur_yValues1 = [];
  var ur_yValues2 = [];
  var ur_yValues3 = [];
  var ur_yValues4 = [];
  var ur_yValues5 = [];
  var ur_yValues6 = [];

  var ures1, ures2, ures3 = 0;
  var totalres1 = 0,
    totalres2 = 0,
    totalres3 = 0;

  var resDetails = await renderResources(ur_sem1, ur_year1);
  var resDetails2 = await renderResources(ur_sem2, ur_year2);
  var resDetails3 = await renderResources(ur_sem3, ur_year3);

  console.log("Chart values:")
  console.log(resDetails);
  console.log(resDetails2);
  console.log(resDetails3);

  //Loop for first input
  for (var h = 0; h < resDetails.length; h++) {
    totalres1 += resDetails[h][0];
    if (resDetails[h][1] == "SBE") {
      ur_yValues1.push(resDetails[h][0].toFixed(2));
    } else if (resDetails[h][1] == "SELS") {
      ur_yValues2.push(resDetails[h][0].toFixed(2));
    } else if (resDetails[h][1] == "SETS") {
      ur_yValues3.push(resDetails[h][0].toFixed(2));
    } else if (resDetails[h][1] == "SLASS") {
      ur_yValues4.push(resDetails[h][0].toFixed(2));
    } else if (resDetails[h][1] == "SPPH") {
      ur_yValues5.push(resDetails[h][0].toFixed(2));
    }
  }
  ur_yValues6.push(totalres1.toFixed(2));

  //Checking for missing or zero ur_yValues
  if (ur_yValues1.length != 1)
    ur_yValues1.push(0);
  if (ur_yValues2.length != 1)
    ur_yValues2.push(0);
  if (ur_yValues3.length != 1)
    ur_yValues3.push(0);
  if (ur_yValues4.length != 1)
    ur_yValues4.push(0);
  if (ur_yValues5.length != 1)
    ur_yValues5.push(0);

  //Loop for second input
  for (var h = 0; h < resDetails2.length; h++) {
    totalres2 += resDetails2[h][0];
    if (resDetails2[h][1] == "SBE") {
      ur_yValues1.push(resDetails2[h][0].toFixed(2));
    } else if (resDetails2[h][1] == "SELS") {
      ur_yValues2.push(resDetails2[h][0].toFixed(2));
    } else if (resDetails2[h][1] == "SETS") {
      ur_yValues3.push(resDetails2[h][0].toFixed(2));
    } else if (resDetails2[h][1] == "SLASS") {
      ur_yValues4.push(resDetails2[h][0].toFixed(2));
    } else if (resDetails2[h][1] == "SPPH") {
      ur_yValues5.push(resDetails2[h][0].toFixed(2));
    }
  }
  ur_yValues6.push(totalres2.toFixed(2));

  //Checking for missing or zero ur_yValues
  if (ur_yValues1.length != 2)
    ur_yValues1.push(0);
  if (ur_yValues2.length != 2)
    ur_yValues2.push(0);
  if (ur_yValues3.length != 2)
    ur_yValues3.push(0);
  if (ur_yValues4.length != 2)
    ur_yValues4.push(0);
  if (ur_yValues5.length != 2)
    ur_yValues5.push(0);

  //Loop for third input
  for (var h = 0; h < resDetails3.length; h++) {
    totalres3 += resDetails3[h][0];
    if (resDetails3[h][1] == "SBE") {
      ur_yValues1.push(resDetails3[h][0].toFixed(2));
    } else if (resDetails3[h][1] == "SELS") {
      ur_yValues2.push(resDetails3[h][0].toFixed(2));
    } else if (resDetails3[h][1] == "SETS") {
      ur_yValues3.push(resDetails3[h][0].toFixed(2));
    } else if (resDetails3[h][1] == "SLASS") {
      ur_yValues4.push(resDetails3[h][0].toFixed(2));
    } else if (resDetails3[h][1] == "SPPH") {
      ur_yValues5.push(resDetails3[h][0].toFixed(2));
    }
  }
  ur_yValues6.push(totalres3.toFixed(2));

  //Checking for missing or zero ur_yValues
  if (ur_yValues1.length != 3)
    ur_yValues1.push(0);
  if (ur_yValues2.length != 3)
    ur_yValues2.push(0);
  if (ur_yValues3.length != 3)
    ur_yValues3.push(0);
  if (ur_yValues4.length != 3)
    ur_yValues4.push(0);
  if (ur_yValues5.length != 3)
    ur_yValues5.push(0);

  var chartTitle = document.getElementById("ur-Chart-Title");
  chartTitle.innerHTML = "Unused resources for " + ur_x1 + ", " + ur_x2 + ", " + ur_x3;

  var ur_xValues = [ur_x1, ur_x2, ur_x3];

  //CHART 1
  resourceChart = new Chart(document.getElementById("ur-chart"), {
    type: 'bar',
    data: {
      datasets: [{
        label: 'SBE',
        data: ur_yValues1,
        backgroundColor: 'rgb(255, 99, 132, 0.35)',
        fill: true
      }, {
        label: 'SELS',
        data: ur_yValues2,
        backgroundColor: 'rgb(255, 159, 64, 0.35)',
        fill: true
      }, {
        label: 'SETS',
        data: ur_yValues3,
        backgroundColor: 'rgb(255, 205, 86, 0.35)',
        fill: true
      }, {
        label: 'SLASS',
        data: ur_yValues4,
        backgroundColor: 'rgb(75, 192, 192, 0.35)',
        fill: true
      }, {
        label: 'SPPH',
        data: ur_yValues5,
        backgroundColor: 'rgb(153, 102, 255, 0.35)',
        fill: true
      }, {
        label: 'Total Unused Resources',
        data: ur_yValues6,
        borderColor: "#3e95cd",
        type: 'line',
        fill: false,
        order: 1
      }],
      labels: ur_xValues
    },
    options: {
      title: {
        display: true,
        position: 'bottom',
        text: 'Unused Resources for Each School'
      }
    }
  });
}

// -------------------------------------------------------------------------------

//Generate chart for SETS sections for class sizes
async function generateSFC(name) {
  //Input Variables for class sizes
  // 1. 1-10 | 2. 11-20 | 3. 21-30 | 4. 31-35 | 5. 36-40 | 6. 41-50 | 7. 51-55
  // 8. 55-60 | 9. 60+
  var sf_yValues1 = [];
  var sf_yValues2 = [];
  var sf_yValues3 = [];
  var sf_yValues4 = [];
  var sf_yValues5 = [];
  var sf_yValues6 = [];
  var sf_yValues7 = [];
  var sf_yValues8 = [];
  var sf_yValues9 = [];

  var totalsec1 = 0,
    totalsec2 = 0,
    totalsec3 = 0;

  //For First Input
  var sec1val1 = await renderSections(sf_sem1, sf_year1, c2v1, c2v2);
  var sec1val2 = await renderSections(sf_sem1, sf_year1, c2v3, c2v4);
  var sec1val3 = await renderSections(sf_sem1, sf_year1, c2v5, c2v6);
  var sec1val4 = await renderSections(sf_sem1, sf_year1, c2v7, c2v8);
  var sec1val5 = await renderSections(sf_sem1, sf_year1, c2v9, c2v10);
  var sec1val6 = await renderSections(sf_sem1, sf_year1, c2v11, c2v12);
  var sec1val7 = await renderSections(sf_sem1, sf_year1, c2v13, c2v14);
  var sec1val8 = await renderSections(sf_sem1, sf_year1, c2v15, c2v16);
  var sec1val9 = await renderSections(sf_sem1, sf_year1, c2v17, c2v18);
  totalsec1 = sec1val1 + sec1val2 + sec1val3 + sec1val4 + sec1val5 + sec1val6 + sec1val7 + sec1val8 + sec1val9;
  sf_yValues1.push(sec1val1);
  sf_yValues2.push(sec1val2);
  sf_yValues3.push(sec1val3);
  sf_yValues4.push(sec1val4);
  sf_yValues5.push(sec1val5);
  sf_yValues6.push(sec1val6);
  sf_yValues7.push(sec1val7);
  sf_yValues8.push(sec1val8);
  sf_yValues9.push(sec1val9);

  //For Second Input
  var sec2val1 = await renderSections(sf_sem2, sf_year2, c3v1, c3v2);
  var sec2val2 = await renderSections(sf_sem2, sf_year2, c3v3, c3v4);
  var sec2val3 = await renderSections(sf_sem2, sf_year2, c3v5, c3v6);
  var sec2val4 = await renderSections(sf_sem2, sf_year2, c3v7, c3v8);
  var sec2val5 = await renderSections(sf_sem2, sf_year2, c3v9, c3v10);
  var sec2val6 = await renderSections(sf_sem2, sf_year2, c3v11, c3v12);
  var sec2val7 = await renderSections(sf_sem2, sf_year2, c3v13, c3v14);
  var sec2val8 = await renderSections(sf_sem2, sf_year2, c3v15, c3v16);
  var sec2val9 = await renderSections(sf_sem2, sf_year2, c3v17, c3v18);
  totalsec2 = sec2val1 + sec2val2 + sec2val3 + sec2val4 + sec2val5 + sec2val6 + sec2val7 + sec2val8 + sec2val9;
  sf_yValues1.push(sec2val1);
  sf_yValues2.push(sec2val2);
  sf_yValues3.push(sec2val3);
  sf_yValues4.push(sec2val4);
  sf_yValues5.push(sec2val5);
  sf_yValues6.push(sec2val6);
  sf_yValues7.push(sec2val7);
  sf_yValues8.push(sec2val8);
  sf_yValues9.push(sec2val9);

  //For Third Input
  var sec3val1 = await renderSections(sf_sem3, sf_year3, cv1, cv2);
  var sec3val2 = await renderSections(sf_sem3, sf_year3, cv3, cv4);
  var sec3val3 = await renderSections(sf_sem3, sf_year3, cv5, cv6);
  var sec3val4 = await renderSections(sf_sem3, sf_year3, cv7, cv8);
  var sec3val5 = await renderSections(sf_sem3, sf_year3, cv9, cv10);
  var sec3val6 = await renderSections(sf_sem3, sf_year3, cv11, cv12);
  var sec3val7 = await renderSections(sf_sem3, sf_year3, cv13, cv14);
  var sec3val8 = await renderSections(sf_sem3, sf_year3, cv15, cv16);
  var sec3val9 = await renderSections(sf_sem3, sf_year3, cv17, cv18);
  totalsec3 = sec3val1 + sec3val2 + sec3val3 + sec3val4 + sec3val5 + sec3val6 + sec3val7 + sec3val8 + sec3val9;
  sf_yValues1.push(sec3val1);
  sf_yValues2.push(sec3val2);
  sf_yValues3.push(sec3val3);
  sf_yValues4.push(sec3val4);
  sf_yValues5.push(sec3val5);
  sf_yValues6.push(sec3val6);
  sf_yValues7.push(sec3val7);
  sf_yValues8.push(sec3val8);
  sf_yValues9.push(sec3val9);

  // console.log(sf_yValues1);
  // console.log(sf_yValues2);
  // console.log(sf_yValues3);
  // console.log(sf_yValues4);
  // console.log(sf_yValues5);
  // console.log(sf_yValues6);
  // console.log(sf_yValues7);
  // console.log(sf_yValues8);
  // console.log(sf_yValues9);

  var chartTitle = document.getElementById("sf-Chart-Title");
  chartTitle.innerHTML = "Number of Sections for Each Class Size in SETS";

  var sf_xValues = [sf_x1, sf_x2, sf_x3];
  var totalValues = [totalsec1, totalsec2, totalsec3];

  // console.log("Total Values: ");
  // console.log(totalsec1);
  // console.log(totalsec2);
  // console.log(totalsec3);
  // console.log(sf_xValues);

  sectionChart = new Chart(document.getElementById("sf-chart"), {
    type: 'bar',
    data: {
      datasets: [{
        label: '1-10',
        data: sf_yValues1,
        backgroundColor: 'rgb(255, 99, 132, 0.35)',
        fill: true
      }, {
        label: '11-20',
        data: sf_yValues2,
        backgroundColor: 'rgb(255, 159, 64, 0.35)',
        fill: true
      }, {
        label: '21-30',
        data: sf_yValues3,
        backgroundColor: 'rgb(255, 205, 86, 0.35)',
        fill: true
      }, {
        label: '31-35',
        data: sf_yValues4,
        backgroundColor: 'rgb(75, 192, 192, 0.35)',
        fill: true
      }, {
        label: '36-40',
        data: sf_yValues5,
        backgroundColor: 'rgb(153, 102, 255, 0.35)',
        fill: true
      }, {
        label: '41-50',
        data: sf_yValues6,
        backgroundColor: 'rgb(20, 202, 255, 0.35)',
        fill: true
      }, {
        label: '51-55',
        data: sf_yValues7,
        backgroundColor: 'rgb(53, 102, 255, 0.35)',
        fill: true
      }, {
        label: '56-60',
        data: sf_yValues8,
        backgroundColor: 'rgb(200, 50, 255, 0.35)',
        fill: true
      }, {
        label: '60+',
        data: sf_yValues9,
        backgroundColor: 'rgb(70, 20, 255, 0.35)',
        fill: true
      }, {
        label: 'Total Sections',
        data: totalValues,
        borderColor: "#3e95cd",
        type: 'line',
        fill: false
      }],
      labels: sf_xValues
    },
    options: {
      title: {
        display: true,
        position: 'bottom',
        text: 'Number of sections for each class size in SETS'
      }
    }
  });
}

// ================================================================================

//Generate chart for Classroom Requirement Analysis
async function generateCRC(name) {
  //Input Variables for class sizes
  // 1. 1-20 | 2. 21-30 | 3. 31-35 | 4. 36-40 | 5. 41-50 | 6. 51-54 | 7. 55-64
  // 8. 65-124 | 9. 125-168
  var cr_yValues2 = [];
  var cr_yValues3 = [];
  var cr_yValues4 = [];

  var cr2_yValues2 = [];
  var cr2_yValues3 = [];
  var cr2_yValues4 = [];

  var cr3_yValues2 = [];
  var cr3_yValues3 = [];
  var cr3_yValues4 = [];

  // console.log(cr_sem1 + cr_year1);
  // console.log(cr_sem2 + cr_year2);
  // console.log(cr_sem3 + cr_year3);

  //For First Input
  var sec1val1 = await renderClass(cr_sem1, cr_year1, r2v1, r2v2);
  var sec1val2 = await renderClass(cr_sem1, cr_year1, r2v3, r2v4);
  var sec1val3 = await renderClass(cr_sem1, cr_year1, r2v5, r2v6);
  var sec1val4 = await renderClass(cr_sem1, cr_year1, r2v7, r2v8);
  var sec1val5 = await renderClass(cr_sem1, cr_year1, r2v9, r2v10);
  var sec1val6 = await renderClass(cr_sem1, cr_year1, r2v11, r2v12);
  var sec1val7 = await renderClass(cr_sem1, cr_year1, r2v13, r2v14);
  var sec1val8 = await renderClass(cr_sem1, cr_year1, r2v15, r2v16);
  var sec1val9 = await renderClass(cr_sem1, cr_year1, r2v17, r2v18);

  // console.log("Data to be returned");
  // console.log(sec1val1);
  // console.log(sec1val2);
  // console.log(sec1val3);
  // console.log(sec1val4);

  cr_yValues2.push(sec1val1[1]);
  cr_yValues2.push(sec1val2[1]);
  cr_yValues2.push(sec1val3[1]);
  cr_yValues2.push(sec1val4[1]);
  cr_yValues2.push(sec1val5[1]);
  cr_yValues2.push(sec1val6[1]);
  cr_yValues2.push(sec1val7[1]);
  cr_yValues2.push(sec1val8[1]);
  cr_yValues2.push(sec1val9[1]);

  cr_yValues3.push(sec1val1[2]);
  cr_yValues3.push(sec1val2[2]);
  cr_yValues3.push(sec1val3[2]);
  cr_yValues3.push(sec1val4[2]);
  cr_yValues3.push(sec1val5[2]);
  cr_yValues3.push(sec1val6[2]);
  cr_yValues3.push(sec1val7[2]);
  cr_yValues3.push(sec1val8[2]);
  cr_yValues3.push(sec1val9[2]);

  cr_yValues4.push(sec1val1[3]);
  cr_yValues4.push(sec1val2[3]);
  cr_yValues4.push(sec1val3[3]);
  cr_yValues4.push(sec1val4[3]);
  cr_yValues4.push(sec1val5[3]);
  cr_yValues4.push(sec1val6[3]);
  cr_yValues4.push(sec1val7[3]);
  cr_yValues4.push(sec1val8[3]);
  cr_yValues4.push(sec1val9[3]);

  console.log("Data returned");

  //For Second Input
  var sec2val1 = await renderClass(cr_sem2, cr_year2, r3v1, r3v2);
  var sec2val2 = await renderClass(cr_sem2, cr_year2, r3v3, r3v4);
  var sec2val3 = await renderClass(cr_sem2, cr_year2, r3v5, r3v6);
  var sec2val4 = await renderClass(cr_sem2, cr_year2, r3v7, r3v8);
  var sec2val5 = await renderClass(cr_sem2, cr_year2, r3v9, r3v10);
  var sec2val6 = await renderClass(cr_sem2, cr_year2, r3v11, r3v12);
  var sec2val7 = await renderClass(cr_sem2, cr_year2, r3v13, r3v14);
  var sec2val8 = await renderClass(cr_sem2, cr_year2, r3v15, r3v16);
  var sec2val9 = await renderClass(cr_sem2, cr_year2, r3v17, r3v18);

  console.log("Data 2 return initiated");

  cr2_yValues2.push(sec2val1[1]);
  cr2_yValues2.push(sec2val2[1]);
  cr2_yValues2.push(sec2val3[1]);
  cr2_yValues2.push(sec2val4[1]);
  cr2_yValues2.push(sec2val5[1]);
  cr2_yValues2.push(sec2val6[1]);
  cr2_yValues2.push(sec2val7[1]);
  cr2_yValues2.push(sec2val8[1]);
  cr2_yValues2.push(sec2val9[1]);

  cr2_yValues3.push(sec2val1[2]);
  cr2_yValues3.push(sec2val2[2]);
  cr2_yValues3.push(sec2val3[2]);
  cr2_yValues3.push(sec2val4[2]);
  cr2_yValues3.push(sec2val5[2]);
  cr2_yValues3.push(sec2val6[2]);
  cr2_yValues3.push(sec2val7[2]);
  cr2_yValues3.push(sec2val8[2]);
  cr2_yValues3.push(sec2val9[2]);

  cr2_yValues4.push(sec2val1[3]);
  cr2_yValues4.push(sec2val2[3]);
  cr2_yValues4.push(sec2val3[3]);
  cr2_yValues4.push(sec2val4[3]);
  cr2_yValues4.push(sec2val5[3]);
  cr2_yValues4.push(sec2val6[3]);
  cr2_yValues4.push(sec2val7[3]);
  cr2_yValues4.push(sec2val8[3]);
  cr2_yValues4.push(sec2val9[3]);

  console.log("Data 2 returned");

  //For Third Input
  var sec3val1 = await renderClass(cr_sem3, cr_year3, r1v1, r1v2);
  var sec3val2 = await renderClass(cr_sem3, cr_year3, r1v3, r1v4);
  var sec3val3 = await renderClass(cr_sem3, cr_year3, r1v5, r1v6);
  var sec3val4 = await renderClass(cr_sem3, cr_year3, r1v7, r1v8);
  var sec3val5 = await renderClass(cr_sem3, cr_year3, r1v9, r1v10);
  var sec3val6 = await renderClass(cr_sem3, cr_year3, r1v11, r1v12);
  var sec3val7 = await renderClass(cr_sem3, cr_year3, r1v13, r1v14);
  var sec3val8 = await renderClass(cr_sem3, cr_year3, r1v15, r1v16);
  var sec3val9 = await renderClass(cr_sem3, cr_year3, r1v17, r1v18);

  console.log("Data 3 return initiated");

  cr3_yValues2.push(sec3val1[1]);
  cr3_yValues2.push(sec3val2[1]);
  cr3_yValues2.push(sec3val3[1]);
  cr3_yValues2.push(sec3val4[1]);
  cr3_yValues2.push(sec3val5[1]);
  cr3_yValues2.push(sec3val6[1]);
  cr3_yValues2.push(sec3val7[1]);
  cr3_yValues2.push(sec3val8[1]);
  cr3_yValues2.push(sec3val9[1]);

  cr3_yValues3.push(sec3val1[2]);
  cr3_yValues3.push(sec3val2[2]);
  cr3_yValues3.push(sec3val3[2]);
  cr3_yValues3.push(sec3val4[2]);
  cr3_yValues3.push(sec3val5[2]);
  cr3_yValues3.push(sec3val6[2]);
  cr3_yValues3.push(sec3val7[2]);
  cr3_yValues3.push(sec3val8[2]);
  cr3_yValues3.push(sec3val9[2]);

  cr3_yValues4.push(sec3val1[3]);
  cr3_yValues4.push(sec3val2[3]);
  cr3_yValues4.push(sec3val3[3]);
  cr3_yValues4.push(sec3val4[3]);
  cr3_yValues4.push(sec3val5[3]);
  cr3_yValues4.push(sec3val6[3]);
  cr3_yValues4.push(sec3val7[3]);
  cr3_yValues4.push(sec3val8[3]);
  cr3_yValues4.push(sec3val9[3]);

  console.log("Data 3 returned");

  for (var i = 1; i < 9; i++) {
    if (cr_yValues2[i] == undefined) {
      cr_yValues2[i] = 0;
      cr_yValues3[i] = 0;
      cr_yValues4[i] = 0;
    }
    if (cr2_yValues2[i] == undefined) {
      cr2_yValues2[i] = 0;
      cr2_yValues3[i] = 0;
      cr2_yValues4[i] = 0;
    }
    if (cr3_yValues2[i] == undefined) {
      cr3_yValues2[i] = 0;
      cr3_yValues3[i] = 0;
      cr3_yValues4[i] = 0;
    }
  }

  console.log("Final Values: ");
  console.log(cr_yValues4);
  console.log(cr2_yValues4);
  console.log(cr3_yValues4);

  var chartTitle1 = document.getElementById("cr-Chart-Title-1");
  chartTitle1.innerHTML = "Analysis of Number of Classes required for " + cr_x1;

  var chartTitle2 = document.getElementById("cr-Chart-Title-2");
  chartTitle2.innerHTML = "Analysis of Number of Classes required for " + cr_x2;

  var chartTitle3 = document.getElementById("cr-Chart-Title-3");
  chartTitle3.innerHTML = "Analysis of Number of Classes required for " + cr_x3;

  var cr_xValues = ['1-20', '21-30', '31-35', '36-40', '41-50', '51-54', '55-64', '65-124', '125-168'];

  classChart1 = new Chart(document.getElementById("cr-chart-1"), {
    type: 'line',
    data: {
      datasets: [{
        label: '7 Slots',
        data: cr_yValues2,
        borderColor: 'rgb(55, 99, 132, 1)',
        backgroundColor: 'rgb(55, 99, 132, 0.02)',
        fill: true,
        order: 3
      }, {
        label: '8 Slots',
        data: cr_yValues3,
        borderColor: 'rgb(132, 212, 64, 1)',
        backgroundColor: 'rgb(132, 212, 64, 0.02)',
        fill: true,
        order: 2
      }, {
        label: 'Classrooms Available',
        data: cr_yValues4,
        borderColor: 'rgb(255, 205, 86, 1)',
        backgroundColor: 'rgb(255, 205, 86, 0.02)',
        fill: true,
        order: 1
      }],
      labels: cr_xValues
    },
    options: {
      title: {
        display: true,
        position: 'bottom',
        text: 'Analysis of Number of Classes required for Different Slots'
      }
    }
  });

  classChart2 = new Chart(document.getElementById("cr-chart-2"), {
    type: 'line',
    data: {
      datasets: [{
        label: '7 Slots',
        data: cr2_yValues2,
        borderColor: 'rgb(55, 99, 132, 1)',
        backgroundColor: 'rgb(55, 99, 132, 0.02)',
        fill: true,
        order: 3
      }, {
        label: '8 Slots',
        data: cr2_yValues3,
        borderColor: 'rgb(132, 212, 64, 1)',
        backgroundColor: 'rgb(132, 212, 64, 0.02)',
        fill: true,
        order: 2
      }, {
        label: 'Classrooms Available',
        data: cr2_yValues4,
        borderColor: 'rgb(255, 205, 86, 1)',
        backgroundColor: 'rgb(255, 205, 86, 0.02)',
        fill: true,
        order: 1
      }],
      labels: cr_xValues
    },
    options: {
      title: {
        display: true,
        position: 'bottom',
        text: 'Analysis of Number of Classes required for Different Slots'
      }
    }
  });

  classChart3 = new Chart(document.getElementById("cr-chart-3"), {
    type: 'line',
    data: {
      datasets: [{
        label: '7 Slots',
        data: cr3_yValues2,
        borderColor: 'rgb(55, 99, 132, 1)',
        backgroundColor: 'rgb(55, 99, 132, 0.02)',
        fill: true,
        order: 3
      }, {
        label: '8 Slots',
        data: cr3_yValues3,
        borderColor: 'rgb(132, 212, 64, 1)',
        backgroundColor: 'rgb(132, 212, 64, 0.02)',
        fill: true,
        order: 2
      }, {
        label: 'Classrooms Available',
        data: cr3_yValues4,
        borderColor: 'rgb(255, 205, 86, 1)',
        backgroundColor: 'rgb(255, 205, 86, 0.02)',
        fill: true,
        order: 1
      }],
      labels: cr_xValues
    },
    options: {
      title: {
        display: true,
        position: 'bottom',
        text: 'Analysis of Number of Classes required for Different Slots'
      }
    }
  });
}
